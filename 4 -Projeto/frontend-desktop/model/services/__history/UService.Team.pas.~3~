unit UService.Team;

interface

uses
  UEntity.Teams,
  UService.Base,
  Generics.Collections;

type
  TServiceTeam = class(TServiceBase)
  private
    FTeam: TTeam;
    FTeams: TObjectList<TTeam>;
    function GetTeams: TObjectList<TTeam>;
  public
    constructor Create; overload;
    constructor Create(aTeam: TTeam); overload;
    destructor Destroy; override;

    procedure Registrar; override;
    procedure Listar; override;
    procedure Excluir; override;

    function ObterRegistro(const aId: Integer): TObject; override;

    property Teams: TObjectList<TTeam> read GetTeams;
  end;

implementation

uses
  System.SysUtils,
  System.JSON, UUtils.Constants, DataSet.Serialize,
  FireDAC.Comp.Client, REST.Types;

{ TServiceTeam }

constructor TServiceTeam.Create;
begin
  Inherited Create;

  FTeams := TObjectList<TTeam>.Create;
end;

constructor TServiceTeam.Create(aTeam: TTeam);
begin
  FTeam := aTeam;
  Self.Create;
end;

destructor TServiceTeam.Destroy;
begin
  FreeAndNil(FTeam);
  FreeAndNil(FTeams);
  inherited;
end;

procedure TServiceTeam.Excluir;
begin
  inherited;

end;

function TServiceTeam.GetTeams: TObjectList<TTeam>;
begin
  Result := FTeams;
end;

procedure TServiceTeam.Listar;
begin
  inherited;

end;

function TServiceTeam.ObterRegistro(const aId: Integer): TObject;
begin

end;

procedure TServiceTeam.Registrar;
begin
  inherited;

end;

end.
